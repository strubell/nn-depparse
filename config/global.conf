#!/bin/bash

if [ "$shape" = "true" ]; then
  export torch_shape_param="-shape"
  # bit of a kluge
  export shape_name="${torch_shape_param}50"
else
  export shape="false"
  export torch_shape_param=""
fi

if [ -z $softmax ]; then
  export softmax="full"
  export softmax_name=""
else
  export softmax_name="-${softmax}softmax"
fi

if [ -z $clusters ]; then
    export clusters="none"
fi

if [ -z $suffix ]; then
  export suffix="0"
  export suff_name=""
  if [ -z $suffix_dim ]; then
    export suffix_dim="0"
  fi
else
  export suff_name="-suff$suffix-$suffix_dim"
fi

if [ -z "$stacked" ]; then
  export stacked="no"
  export stacked_name=""
else
  export stacked_name="-stack$stacked"
fi

if [ -z "$shape_dim" ]; then
  export shape_dim="0"
fi

if [ -z "$pretrained_model" ]; then
    export torch_pretain=""
    export pretrain_name=""
elif [ "$pretrained_model" = "self" ]; then
    export torch_pretain=""
    export pretrain_name="-pretrain"
else
    export torch_pretrain="-load_feature_net $pretrained_model"
    if [ -z "$clusters" ]; then
    	export pretrain_name="-pretrain"
    else
        export pretrain_name=""
    fi
fi

if [ -z "$filter_projective" ]; then
    export filter_projective="true"
fi

if [ -z "$collapsed" ]; then
    export collapsed="1"
    export collapsed_name=""
else
    export collapsed_name="-collapsed$collapsed"
fi

#if [ "$feats" = "cheat" ]; then
#    feats_name="chen"
#else
#    feats_name=$feats
#fi

export config_name="$parser-$feats-$embeddings_name$shape_name$suff_name$stacked_name$pretrain_name$collapsed_name"

export embeddings_dir="$NNDEPPARSE_ROOT/data/embeddings"
export processed_data_dir="$NNDEPPARSE_ROOT/data/$data_name"
export static_intmaps_dir="$processed_data_dir/intmaps"
export decisions_output_dir="$processed_data_dir/decisions/$config_name"
export intmaps_output_dir="$processed_data_dir/intmaps/$config_name"
export torch_output_dir="$processed_data_dir/torch/$config_name"
export embedding_file="$embeddings_dir/$embeddings"

if [ $collapsed -gt 1 ]; then
    export torch_decisions_train_file="$torch_output_dir/${train_file##*/}.decisions.collapsed.intmap.torch"
    export torch_decisions_dev_file="$torch_output_dir/${dev_file##*/}.decisions.collapsed.intmap.torch"
    export torch_decisions_test_file="$torch_output_dir/${test_file##*/}.decisions.collapsed.intmap.torch"
else
    export torch_decisions_train_file="$torch_output_dir/${train_file##*/}.decisions.intmap.torch"
    export torch_decisions_dev_file="$torch_output_dir/${dev_file##*/}.decisions.intmap.torch"
    export torch_decisions_test_file="$torch_output_dir/${test_file##*/}.decisions.intmap.torch"
fi
export torch_sentences_train_file="$torch_output_dir/${train_file##*/}.sentences.intmap.torch"
export torch_sentences_dev_file="$torch_output_dir/${dev_file##*/}.sentences.intmap.torch"
export torch_sentences_test_file="$torch_output_dir/${test_file##*/}.sentences.intmap.torch"
export torch_embeddings_file="$torch_output_dir/${embedding_file##*/}.torch"
export decision_map="$intmaps_output_dir/decision2int"
export punct_set="$intmaps_output_dir/punct"
export label2int="$intmaps_output_dir/label2int"
export word2int="$intmaps_output_dir/word2int"
export pos2int="$intmaps_output_dir/pos2int"
export shape2int="$intmaps_output_dir/shape2int"
export suffix2int="$intmaps_output_dir/suff2int"
export suffix22int="$intmaps_output_dir/suff22int"
export suffix32int="$intmaps_output_dir/suff32int"
export symbol2int="$intmaps_output_dir/symbol2int"
export stacked_pos="$intmaps_output_dir/stacked_pos"
export label_masks="$intmaps_output_dir/label_masks"
